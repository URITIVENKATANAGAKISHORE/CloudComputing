Problem Statement:- 
Deploying Web Application Using CI/CD Pipeline. In the pipeline process, we are going to use GitHub, Jenkins, Ansible, Docker, Docker Hub, Kubernetes and AWS Cloud to host the following services on VM’s.

Architecture Diagram:-
 

Architecture diagram show that we have to setup the continuous integration and continuous delivery setup.
For the complete CI/CD Pipeline setup, we need the following servers.
1.	Setup Git Hub Repository with IDE
2.	Set up Jenkins server
3.	Set up Ansible Server & Docker 
4.	Set up Kubernetes Server and Cluster

Jenkins used for fetching the code from the git repository and build with maven and java after the build successful war file will be created in workspace folder “/var/lib/Jenkins/workspace/” of Jenkins from the following path the war file has to be move to ansible server. In ansible server by using ansible-playbook we are trying to create the application image and push in to Docker hub from there the Kubernetes will pull the application image and create the container. In Kubernetes we had create the load balancer with help of pods. Now with two pods we are managing the application.
Below we can see the process how to setup the environment for Jenkins  
1.	Setup GitHub Repository with IDE.
 

 


2.	Setup of Jenkins server in AWS 
Architecture Diagram:-
 
Login to the VM Create in AWS using MobaXterm or putty if you are using puty you have to convert your pem in private key, so if we use the MobaXterm no need to convert the pem in to private. 

Take the Public IP of the VM and use to connect the VM form MobaXterm.
To login we have to use user name as ec2-user for the Amazon Linux machine.
After that login as a root by using, the following command listed below
sudo su – root  Login as root User
Java –version  Check the Java Version
It will shows that java was not installed so we have to install by using yum install java 
 
After the installation set the Java Home Path, to set the path need to find the where jre is exists. 
This command gives where jre is exists  find /usr/lib/jvm/java-1.8* | head -n 3
To set Home path under home directory type this command under root user cd ~
Then edit the bash profile vi .bash_profile
 
 JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.201.b09-0.43.amznl.x86_64
PATH=$PATH:$HOME/bin:$JAVA_HOME
Now install the Jenkins in VM.
Run this commands to setup Jenkins repository in VM.
sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
 
Run this command to install Jenkins from repository.
yum install jenkins
 
To Check the Jenkins status please run the following commands.
	Service jenkins status
	Service jenkins start
 
http://PublicIPAddressofJenkinsVM:8080/
 
You can get the admin password from the following path.
cat /var/lib/jenkins/secrets/initialAdminPassword
53d3959edeaf4e59948db984c783caf5
 
Setup java home path in Jenkins
 

 
 

Setup the git repository in Jenkin Server.
Run the yum install git –y command
 
 
In Jenkins Console we have to add the git/maven/docker plugin etc for that we have to follow the following process.
 

 

 

Maven on Jenkin server
# Creating maven directory under /opt
 mkdir /opt/maven
 cd /opt/maven
 # downloading maven version 3.6.0
 wget http://mirrors.estointernet.in/apache/maven/maven-3/3.6.1/binaries/apache-maven-3.6.1-bin.tar.gz
 tar -xvzf apache-maven-3.6.1-bin.tar.gz
 

 

 
Setup M2_HOME and M2 paths in .bash_profile of the user and add these to the path variable
vi ~/.bash_profile
M2_HOME=/opt/maven/apache-maven-3.6.1
M2=$M2_HOME/bin
PATH=<Existing_PATH>:$M2_HOME:$M2
 
 

 

 

 

Setup maven path
 

 

 
Add the plugins in Jenkins to run war file in containers
 

3.	Setup of Ansible Server in AWS
Architecture Diagram:-
 
Note: - We had some limitations to using Jenkins for alternative we are using ansible as deployment tool in this project.

Create EC2 instance for Ansible, I will call it as ansible server. The process is same like Jenkins VM Creation.
1.	Install python and python-pip
yum install python
yum install python-pip
 
 

2.	Install ansible using pip check for version
pip install ansible
ansible –version
 


We don’t have ansible directory so create it
Mkdir /etc/ansible
 

3.	Create a user called ansadmin (on Control node and Managed host)
useradd ansadmin
passwd ansadmin
 
4.	Below command grant sudo access to ansadmin user. But we strongly recommended using "visudo" command if you are aware vi or nano editor. (on Control node and Managed host)

echo "ansadmin ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
 
 
  
 
5.	Log in as a ansadmin user on master and generate ssh key (on Control node)
ssh-keygen
 

 
6.	Copy keys onto all ansible managed hosts (on Control node)
ssh-copy-id ansadmin@<target-server> target server is kubernetes server
 
7.	Ansible server used to create images and store on docker registry. Hence install docker, start docker services and add ansadmin to the docker group.

8.	yum install docker
# start docker services 
service docker start
service docker start 

# add user to docker group 
usermod -aG docker ansadmin

 
 
 

 

9.	Create a directory /etc/ansible and create an inventory file called "hosts" add control node and managed hosts IP addresses to it.

 
 

 

10.	Validation test
Run ansible command as ansadmin user it should be successful (Master)
ansible all -m ping
 
11.	How to integrate the ansible and Jenkins
 

In Jenkins Console  Manage Plugins  Global Configuration.

 
  
We had create the Ansible server and configure in Jenkins, but we have not created the ansible-playbooks to create the image and push in to the docker hub and pull in to kubernetes. Next session we can see how to setup the kubernetes and create the ansible-playbooks and kubernetes files to pull the images and create the containers 
4.	Setup of Kubernetes Server and Cluster in AWS
To Setup Kubernetes we required 
Architecture Diagram:-
 

1.	Create Ubuntu EC2 instance.
 
2.	install AWSCLI as root
curl https://s3.amazonaws.com/aws-cli/awscli-bundle.zip -o awscli-bundle.zip
 apt install unzip python
 unzip awscli-bundle.zip
 #sudo apt-get install unzip - if you dont have unzip in your system
 ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
 
 

3.	Install kubectl on ubuntu instance
curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl
 

 

4.	Install kops on ubuntu instance
curl -LO https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
 

5.	Create an IAM user/role with Route53, EC2, IAM and S3 full access
 

 
 
 
 
 
 
 

 
 
Attach this role to kubus instance
6.	Attach IAM role to ubuntu instance
 
 
 

Run the aws configure
 

7.	Create a Route53 private hosted zone (you can create Public hosted zone if you have a domain)
 
 
 
 

8.	create an S3 bucket
aws s3 mb s3://kubes.uritikishorepromotes.blogspot.com 
 
 
9.	Expose environment variable
export KOPS_STATE_STORE=s3://kubes.uritikishorepromotes.blogspot.com

 

10.	Create sshkeys before creating cluster
ssh-keygen

 


11.	Create kubernetes cluster definitions on S3 bucket
kops create cluster --cloud=aws --zones=ap-south-1b --name=kubes.uritikishorepromotes.blogspot.com --dns-zone=uritikishorepromotes.blogspot.com --dns private

 


 

Cluster configuration has been created.

Suggestions:
 * list clusters with: kops get cluster
 * edit this cluster with: kops edit cluster kubes.uritikishorepromotes.blogspot.com
 * edit your node instance group: kops edit ig --name=kubes.uritikishorepromotes.blogspot.com nodes
 * edit your master instance group: kops edit ig --name=kubes.uritikishorepromotes.blogspot.com master-ap-south-1b

Finally configure your cluster with: kops update cluster --name kubes.uritikishorepromotes.blogspot.com --yes




 


12.	Create kubernetes cluser
kops update cluster --name kubes.uritikishorepromotes.blogspot.com --yes

 


 

 

 

 


 


 

 

 

 

13.	Validate your cluster
kops validate cluster
kubectl get nodes --show-labels

Master and Nodes are not ready.

 


Master and Nodes are ready
 



 



14.	To list nodes
ssh -i ~/.ssh/id_rsa admin@api.kubes.uritikishorepromotes.blogspot.com

 

kubectl get nodes
kubectl get deployments
kubectl get services
kubectl get pods
 

15.	Deploying pods/service/deployments on Kubernetes 
We have to create deploy then only pods can create in backend, and services are used to access the application to outside via pods.

bits-assignment-deployment.yml
bits-assignment-service.yml


kubectl apply -f bits-assignment-deployment.yml

 

 


kubectl apply -f bits-assignment-service.yml

 
 

 

 


 
 



16.	Integrating Kubernetes cluster with Ansible
Login to ansible server and copy public key onto kubernetes cluseter master account
 
 
 
Update hosts file with new group called kubernetes and add kubernetes master in that.
 

Create ansible playbooks to create deployment and services
 




 

 

 


 

  

Check for pods, deployments and services on kubernetes master	
kubectl get pods -o wide 
kubectl get deploy -o wide
kubectl get service -o wide

 
 Create the Jenkins job for CD pipeline.
               


Run the Jenkins Job before that login to Kubnetes master server and delete the deployments/services/pods 
 


 








 

Create Jenkins CI Job, which creates docker images, and push in to docker hub
 
 


 
 

Join Jenkins CI and CD Jobs 

 
 
 
Access application suing service IP
wget <kubernetes-Master-IP>:30692

